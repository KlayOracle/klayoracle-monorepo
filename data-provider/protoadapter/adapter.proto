syntax = "proto3";

option go_package = "github.com/klayoracle/klayoracle-monorepo/data-provider/protoadapter";

package protoadapter;

service DataProviderService {
  // Server streaming RPC
  // Node as client sends request using Stub to Data Provider as Server
  // Gets a continuous unending stream to notify Node of connection
//  rpc Ping(Node) returns(stream ServerStatus);

  rpc AddToKnownPeers(DPInfo) returns(Null);

  rpc ListKnownPeers(Null) returns(DPInfos);

  // Unary RPC
  // Node as client sends request to retrieve details of an Adapter
  // Waits and gets a one time response and connection is closed
//  rpc GetAdapter(AdapterHead) returns(Adapter);

  // Server streaming RPC
  // Node as client requests for Adapter lists from Data Providers as Server
  // Data Providers sends a stream of all available adapter and closes connection after sending the last one
//  rpc ListAdapters(Node) returns (stream Adapter);
}

message DPInfo {
  string listen_address = 1;
  string name = 2;
  string k_org_id = 3;
  map<string, DPInfo> knownPeers = 4;
  map<string, DPInfo> bootstraps = 5;
}

message DPInfos {
  repeated DPInfo list = 1;
}

// Node sends its IP details, sign `an arbitrary message
// and provides hash of message and signature to proof
// that it can request information from a Data Provider
message Node {
  string IP = 1;
}

message ServerStatus {
    bool alive = 1;
    string message = 2;
}

message Null{}

enum JobTypes {
  DATA_FEED = 0;
  RANDOM_NUMBER = 1;
}

enum RequestType {
  GET = 0;
  POST = 1;
}

enum FeedCategory {
  RNG = 0;          // random number generator
  SPORT = 1;        // live scores, past data e.t.c
  PRICE_FEED = 2;   // data such as spot prices
  WEATHER = 3;      // transactions or balances happening on other blockchains
  FLIGHT  = 4;      // departure and arrival statuses on-chain
  BLOCKCHAIN = 5;   // transactions or balances happening on other blockchains
  NFT_DATA = 6;     // floor Prices, Asset Listings, Collection Details
}

// Contains field that doesn't change throughout
// the lifetime of an adapter.
message AdapterHead {
  string adapter_id = 1;
  string oracle_address = 2;
}

message Adapter {
  bool active = 1;
  string name = 2;
  JobTypes job_type = 3;
  string adapter_id = 4;
  string oracle_address = 5;
  repeated Feed feeds = 6;
  FeedCategory category = 7;
  int64 frequency = 8;
}

message Adapters {
  repeated Adapter adapters = 1;
}

message Reducer {
  string function = 1;
  repeated string args = 2;
}

message Feed {
  string url = 1;
  message Header {
    map<string, string> field = 1;
  }
  repeated Header headers = 2;
  RequestType request_type = 3;
  repeated Reducer reducers = 4;
  string payload = 5;
}