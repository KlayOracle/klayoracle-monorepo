// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: data-provider/protoadapter/adapter.proto

package protoadapter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataProviderServiceClient is the client API for DataProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProviderServiceClient interface {
	ListKnownPeers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*DPInfos, error)
}

type dataProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProviderServiceClient(cc grpc.ClientConnInterface) DataProviderServiceClient {
	return &dataProviderServiceClient{cc}
}

func (c *dataProviderServiceClient) ListKnownPeers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*DPInfos, error) {
	out := new(DPInfos)
	err := c.cc.Invoke(ctx, "/protoadapter.DataProviderService/ListKnownPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProviderServiceServer is the server API for DataProviderService service.
// All implementations must embed UnimplementedDataProviderServiceServer
// for forward compatibility
type DataProviderServiceServer interface {
	ListKnownPeers(context.Context, *Null) (*DPInfos, error)
	mustEmbedUnimplementedDataProviderServiceServer()
}

// UnimplementedDataProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataProviderServiceServer struct {
}

func (UnimplementedDataProviderServiceServer) ListKnownPeers(context.Context, *Null) (*DPInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnownPeers not implemented")
}
func (UnimplementedDataProviderServiceServer) mustEmbedUnimplementedDataProviderServiceServer() {}

// UnsafeDataProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProviderServiceServer will
// result in compilation errors.
type UnsafeDataProviderServiceServer interface {
	mustEmbedUnimplementedDataProviderServiceServer()
}

func RegisterDataProviderServiceServer(s grpc.ServiceRegistrar, srv DataProviderServiceServer) {
	s.RegisterService(&DataProviderService_ServiceDesc, srv)
}

func _DataProviderService_ListKnownPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProviderServiceServer).ListKnownPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoadapter.DataProviderService/ListKnownPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProviderServiceServer).ListKnownPeers(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProviderService_ServiceDesc is the grpc.ServiceDesc for DataProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoadapter.DataProviderService",
	HandlerType: (*DataProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKnownPeers",
			Handler:    _DataProviderService_ListKnownPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data-provider/protoadapter/adapter.proto",
}
