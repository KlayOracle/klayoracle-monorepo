/* tslint:disable */
/* eslint-disable */
/**
* @returns {string}
*/
export function generateLegacyPhrase(): string;
/**
* @param {string} phrase
* @returns {KeyPair}
*/
export function deriveLegacyPhrase(phrase: string): KeyPair;
/**
* @param {number} words
* @returns {string}
*/
export function generateBip39Phrase(words: number): string;
/**
* @param {string} phrase
* @param {string} path
* @returns {KeyPair}
*/
export function deriveBip39Phrase(phrase: string, path: string): KeyPair;
/**
* @param {number} account_id
* @returns {string}
*/
export function makeBip39Path(account_id: number): string;
/**
* @param {string} secret_key
* @param {string} data
* @returns {string}
*/
export function sign(secret_key: string, data: string): string;
/**
* @param {string} secret_key
* @returns {string}
*/
export function getPublicKey(secret_key: string): string;
/**
* @param {string} public_key
* @param {string} data
* @param {string} signature
* @returns {boolean}
*/
export function verifySignature(public_key: string, data: string, signature: string): boolean;
/**
* @param {string} signature
* @returns {ExtendedSignature}
*/
export function extendSignature(signature: string): ExtendedSignature;

export type KeyPair = {
    secretKey: string,
    publicKey: string,
};

export type ExtendedSignature = {
    signature: string,
    signatureHex: string,
    signatureParts: {
        high: string,
        low: string,
    }
};



export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly generateLegacyPhrase: (a: number) => void;
  readonly deriveLegacyPhrase: (a: number, b: number, c: number) => void;
  readonly generateBip39Phrase: (a: number, b: number) => void;
  readonly deriveBip39Phrase: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly makeBip39Path: (a: number, b: number) => void;
  readonly sign: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly getPublicKey: (a: number, b: number, c: number) => void;
  readonly verifySignature: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly extendSignature: (a: number, b: number, c: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

/**
* Synchronously compiles the given `bytes` and instantiates the WebAssembly module.
*
* @param {BufferSource} bytes
*
* @returns {InitOutput}
*/
export function initSync(bytes: BufferSource): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
