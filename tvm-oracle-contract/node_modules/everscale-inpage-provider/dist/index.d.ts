import { ProviderApiRequestParams, ProviderApiResponse, ProviderEvent, ProviderEventData, ProviderMethod, RawProviderApiRequestParams, RawProviderApiResponse, RawProviderEventData, RawProviderRequest } from './api';
import { AbiVersion, AssetType, AssetTypeParams, EncryptedData, DecodedAbiInitData, MergeInputObjectsArray, MergeOutputObjectsArray, ReadonlyAbiParam } from './models';
import { Address } from './utils';
import * as subscriber from './stream';
import * as contract from './contract';
export * from './api';
export * from './models';
export * from './contract';
export { Stream, Subscriber } from './stream';
export { Address, CheckAddress, AddressLiteral, UniqueArray, MessageExpiredException, mergeTransactions, isAddressObject, LT_COLLATOR, } from './utils';
/**
 * @category Provider
 */
export interface Provider {
    request<T extends ProviderMethod>(data: RawProviderRequest<T>): Promise<RawProviderApiResponse<T>>;
    addListener<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
    removeListener<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
    on<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
    once<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
    prependListener<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
    prependOnceListener<T extends ProviderEvent>(eventName: T, listener: (data: RawProviderEventData<T>) => void): this;
}
/**
 * @category Provider
 */
export declare type ProviderProperties = {
    /***
     * Ignore injected provider and try to use `fallback` instead.
     * @default false
     */
    forceUseFallback?: boolean;
    /***
     * Provider factory which will be called if injected provider was not found.
     * Can be used for initialization of the standalone Everscale client
     */
    fallback?: () => Promise<Provider>;
};
declare global {
    interface Window {
        __ever: Provider | undefined;
        __hasEverscaleProvider: boolean | undefined;
        ton: Provider | undefined;
        hasTonProvider: boolean | undefined;
    }
}
/**
 * @category Provider
 */
export declare function hasEverscaleProvider(): Promise<boolean>;
/**
 * @category Provider
 */
export declare class ProviderRpcClient {
    private readonly _properties;
    private readonly _api;
    private readonly _initializationPromise;
    private readonly _subscriptions;
    private readonly _contractSubscriptions;
    private _provider?;
    Contract: new <Abi>(abi: Abi, address: Address) => contract.Contract<Abi>;
    Subscriber: new () => subscriber.Subscriber;
    constructor(properties?: ProviderProperties);
    /**
     * Checks whether this page has injected Everscale provider or
     * there is a fallback provider.
     */
    hasProvider(): Promise<boolean>;
    /**
     * Waits until provider api will be available. Calls `fallback` if no provider was found
     *
     * @throws ProviderNotFoundException when no provider found
     */
    ensureInitialized(): Promise<void>;
    /**
     * Whether provider api is ready
     */
    get isInitialized(): boolean;
    /**
     * Raw provider
     */
    get raw(): Provider;
    /**
     * Raw provider api
     */
    get rawApi(): RawProviderApiMethods;
    /**
     * Creates typed contract wrapper.
     *
     * @param abi Readonly object (must be declared with `as const`)
     * @param address Default contract address
     *
     * @deprecated `new ever.Contract(abi, address)` should be used instead
     */
    createContract<Abi>(abi: Abi, address: Address): contract.Contract<Abi>;
    /**
     * Creates subscriptions group
     *
     * @deprecated `new ever.Subscriber()` should be used instead
     */
    createSubscriber(): subscriber.Subscriber;
    /**
     * Requests new permissions for current origin.
     * Shows an approval window to the user.
     * Will overwrite already existing permissions
     *
     * ---
     * Required permissions: none
     */
    requestPermissions(args: ProviderApiRequestParams<'requestPermissions'>): Promise<ProviderApiResponse<'requestPermissions'>>;
    /**
     * Updates `accountInteraction` permission value
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    changeAccount(): Promise<void>;
    /**
     * Removes all permissions for current origin and stops all subscriptions
     */
    disconnect(): Promise<void>;
    /**
     * Called every time contract state changes
     */
    subscribe(eventName: 'contractStateChanged', params: {
        address: Address;
    }): Promise<Subscription<'contractStateChanged'>>;
    /**
     * Called on each new transactions batch, received on subscription
     */
    subscribe(eventName: 'transactionsFound', params: {
        address: Address;
    }): Promise<Subscription<'transactionsFound'>>;
    /**
     * Called every time when provider connection is established
     */
    subscribe(eventName: 'connected'): Promise<Subscription<'connected'>>;
    /**
     * Called when inpage provider disconnects from extension
     */
    subscribe(eventName: 'disconnected'): Promise<Subscription<'disconnected'>>;
    /**
     * Called every time a delayed message was delivered or expired
     */
    subscribe(eventName: 'messageStatusUpdated'): Promise<Subscription<'messageStatusUpdated'>>;
    /**
     * Called each time the user changes network
     */
    subscribe(eventName: 'networkChanged'): Promise<Subscription<'networkChanged'>>;
    /**
     * Called when permissions are changed.
     * Mostly when account has been removed from the current `accountInteraction` permission,
     * or disconnect method was called
     */
    subscribe(eventName: 'permissionsChanged'): Promise<Subscription<'permissionsChanged'>>;
    /**
     * Called when the user logs out of the extension
     */
    subscribe(eventName: 'loggedOut'): Promise<Subscription<'loggedOut'>>;
    /**
     * Returns provider api state
     *
     * ---
     * Required permissions: none
     */
    getProviderState(): Promise<ProviderApiResponse<'getProviderState'>>;
    /**
     * Requests contract balance
     *
     * ---
     * Required permissions: `basic`
     */
    getBalance(address: Address): Promise<string>;
    /**
     * Requests contract data
     *
     * ---
     * Required permissions: `basic`
     */
    getFullContractState(args: ProviderApiRequestParams<'getFullContractState'>): Promise<ProviderApiResponse<'getFullContractState'>>;
    /**
     * Requests accounts with specified code hash
     *
     * ---
     * Required permissions: `basic`
     */
    getAccountsByCodeHash(args: ProviderApiRequestParams<'getAccountsByCodeHash'>): Promise<ProviderApiResponse<'getAccountsByCodeHash'>>;
    /**
     * Requests contract transactions
     *
     * ---
     * Required permissions: `basic`
     */
    getTransactions(args: ProviderApiRequestParams<'getTransactions'>): Promise<ProviderApiResponse<'getTransactions'>>;
    /**
     * Searches transaction by hash
     *
     * ---
     * Required permissions: `basic`
     */
    getTransaction(args: ProviderApiRequestParams<'getTransaction'>): Promise<ProviderApiResponse<'getTransaction'>>;
    /**
     * Computes contract address from code and init params
     *
     * ---
     * Required permissions: `basic`
     */
    getExpectedAddress<Abi>(abi: Abi, args: GetExpectedAddressParams<Abi>): Promise<Address>;
    /**
     * Computes contract address and state from code and init params
     *
     * ---
     * Required permissions: `basic`
     */
    getStateInit<Abi>(abi: Abi, args: GetExpectedAddressParams<Abi>): Promise<ProviderApiResponse<'getExpectedAddress'>>;
    /**
     * Decodes initial contract data using the specified ABI
     *
     * ---
     * Required permissions: `basic`
     */
    unpackInitData<Abi>(abi: Abi, data: string): Promise<{
        publicKey?: string;
        initParams: DecodedAbiInitData<Abi>;
    }>;
    /**
     * Computes hash of base64 encoded BOC
     *
     * ---
     * Required permissions: `basic`
     */
    getBocHash(boc: string): Promise<string>;
    /**
     * Creates base64 encoded BOC
     *
     * ---
     * Required permissions: `basic`
     */
    packIntoCell<P extends readonly ReadonlyAbiParam[]>(args: {
        abiVersion?: AbiVersion;
        structure: P;
        data: MergeInputObjectsArray<P>;
    }): Promise<ProviderApiResponse<'packIntoCell'>>;
    /**
     * Decodes base64 encoded BOC
     *
     * ---
     * Required permissions: `basic`
     */
    unpackFromCell<P extends readonly ReadonlyAbiParam[]>(args: {
        abiVersion?: AbiVersion;
        structure: P;
        boc: string;
        allowPartial: boolean;
    }): Promise<{
        data: MergeOutputObjectsArray<P>;
    }>;
    /**
     * Extracts public key from raw account state
     *
     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header
     *
     * ---
     * Required permissions: `basic`
     */
    extractPublicKey(boc: string): Promise<string>;
    /**
     * Converts base64 encoded contract code into tvc with default init data
     *
     * ---
     * Required permissions: `basic`
     */
    codeToTvc(code: string): Promise<string>;
    /**
     * Merges code and data into state init
     *
     * ---
     * Required permissions: `basic`
     */
    mergeTvc(args: ProviderApiRequestParams<'mergeTvc'>): Promise<ProviderApiResponse<'mergeTvc'>>;
    /**
     * Splits base64 encoded state init into code and data
     *
     * ---
     * Required permissions: `basic`
     */
    splitTvc(tvc: string): Promise<ProviderApiResponse<'splitTvc'>>;
    /**
     * Merges code and data into state init
     *
     * ---
     * Required permissions: `basic`
     */
    setCodeSalt<P extends readonly ReadonlyAbiParam[]>(args: SetCodeSaltParams<P>): Promise<ProviderApiResponse<'setCodeSalt'>>;
    /**
     * Retrieves salt from code. Returns undefined if code doesn't contain salt
     *
     * ---
     * Required permissions: `basic`
     */
    getCodeSalt(args: GetCodeSaltParams): Promise<string | undefined>;
    /**
     * Adds asset to the selected account
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    addAsset<T extends AssetType>(args: AddAssetParams<T>): Promise<ProviderApiResponse<'addAsset'>>;
    verifySignature(args: ProviderApiRequestParams<'verifySignature'>): Promise<ProviderApiResponse<'verifySignature'>>;
    /**
     * Signs arbitrary data.
     *
     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    signData(args: ProviderApiRequestParams<'signData'>): Promise<ProviderApiResponse<'signData'>>;
    /**
     * Signs arbitrary data without hashing it
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    signDataRaw(args: ProviderApiRequestParams<'signDataRaw'>): Promise<ProviderApiResponse<'signDataRaw'>>;
    /**
     * Encrypts arbitrary data with specified algorithm for each specified recipient
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    encryptData(args: ProviderApiRequestParams<'encryptData'>): Promise<EncryptedData[]>;
    /**
     * Decrypts encrypted data. Returns base64 encoded data
     *
     * ---
     * Requires permissions: `accountInteraction`
     */
    decryptData(encryptedData: EncryptedData): Promise<string>;
    /**
     * Sends an internal message from the user account.
     * Shows an approval window to the user.
     *
     * ---
     * Required permissions: `accountInteraction`
     */
    sendMessage(args: ProviderApiRequestParams<'sendMessage'>): Promise<ProviderApiResponse<'sendMessage'>>;
    /**
     * Sends an internal message from the user account without waiting for the transaction.
     * Shows an approval window to the user.
     *
     * @see messageStatusUpdated
     *
     * ---
     * Required permissions: `accountInteraction`
     */
    sendMessageDelayed(args: ProviderApiRequestParams<'sendMessageDelayed'>): Promise<contract.DelayedMessageExecution>;
    private _registerEventHandlers;
}
/**
 * @category Provider
 */
export interface Subscription<T extends ProviderEvent> {
    /**
     * Fires on each incoming event with the event object as argument.
     *
     * @param eventName 'data'
     * @param listener
     */
    on(eventName: 'data', listener: (data: ProviderEventData<T>) => void): this;
    /**
     * Fires on successful re-subscription
     *
     * @param eventName 'subscribed'
     * @param listener
     */
    on(eventName: 'subscribed', listener: () => void): this;
    /**
     * Fires on unsubscription
     *
     * @param eventName 'unsubscribed'
     * @param listener
     */
    on(eventName: 'unsubscribed', listener: () => void): this;
    /**
     * Can be used to re-subscribe with the same parameters.
     */
    subscribe: () => Promise<void>;
    /**
     * Unsubscribes the subscription.
     */
    unsubscribe: () => Promise<void>;
}
/**
 * @category Provider
 */
export declare class ProviderNotFoundException extends Error {
    constructor();
}
/**
 * @category Provider
 */
export declare class ProviderNotInitializedException extends Error {
    constructor();
}
/**
 * @category Provider
 */
export declare type RawRpcMethod<P extends ProviderMethod> = RawProviderApiRequestParams<P> extends undefined ? () => Promise<RawProviderApiResponse<P>> : (args: RawProviderApiRequestParams<P>) => Promise<RawProviderApiResponse<P>>;
/**
 * @category Provider
 */
export declare type RawProviderApiMethods = {
    [P in ProviderMethod]: RawRpcMethod<P>;
};
/**
 * @category Provider
 */
export declare type GetExpectedAddressParams<Abi> = Abi extends {
    data: infer D;
} ? {
    /**
     * Base64 encoded TVC file
     */
    tvc: string;
    /**
     * Contract workchain. 0 by default
     */
    workchain?: number;
    /**
     * Public key, which will be injected into the contract. 0 by default
     */
    publicKey?: string;
    /**
     * State init params
     */
    initParams: MergeInputObjectsArray<D>;
} : never;
/**
 * @category Provider
 */
export declare type SetCodeSaltParams<P extends readonly ReadonlyAbiParam[]> = {
    /**
     * Base64 encoded contract code
     */
    code: string;
    /**
     * Base64 encoded salt (as BOC) or params of boc encoder
     */
    salt: string | {
        /**
         * ABI version. 2.2 if not specified otherwise
         */
        abiVersion?: AbiVersion;
        /**
         * Cell structure
         */
        structure: P;
        /**
         * Cell data
         */
        data: MergeInputObjectsArray<P>;
    };
};
/**
 * @category Provider
 */
export declare type GetCodeSaltParams = {
    /**
     * Base64 encoded contract code
     */
    code: string;
};
/**
 * @category Provider
 */
export declare type AddAssetParams<T extends AssetType> = {
    /**
     * Owner's wallet address.
     * It is the same address as the `accountInteraction.address`, but it must be explicitly provided
     */
    account: Address;
    /**
     * Which asset to add
     */
    type: T;
    /**
     * Asset parameters
     */
    params: AssetTypeParams<T>;
};
