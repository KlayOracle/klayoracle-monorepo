import type * as nt from 'nekoton-wasm';
import { Address, TokensObject } from 'everscale-inpage-provider';
import { Account, PrepareMessageParams, AccountsStorageContext } from './';
type GenericAccountCall = {
    method: string;
    params: TokensObject<string>;
    stateInit?: string;
};
type PrepareMessage = (args: PrepareMessageParams, ctx: AccountsStorageContext) => Promise<GenericAccountCall>;
/**
 * @category AccountsStorage
 */
export declare class GenericAccount implements Account {
    readonly address: Address;
    private readonly abi;
    private readonly prepareMessageImpl;
    private publicKey?;
    constructor(args: {
        address: string | Address;
        abi: object | string;
        prepareMessage: PrepareMessage;
        publicKey?: string;
    });
    fetchPublicKey(ctx: AccountsStorageContext): Promise<string>;
    prepareMessage(args: PrepareMessageParams, ctx: AccountsStorageContext): Promise<nt.SignedMessage>;
}
/**
 * @category AccountsStorage
 */
export declare class MsigAccount extends GenericAccount {
    constructor(args: {
        address: string | Address;
        publicKey?: string;
        type: 'SafeMultisig' | 'multisig2';
    });
}
export {};
