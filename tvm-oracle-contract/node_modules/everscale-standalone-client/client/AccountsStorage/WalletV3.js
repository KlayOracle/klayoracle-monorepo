"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletV3Account = void 0;
const everscale_inpage_provider_1 = require("everscale-inpage-provider");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const core_1 = __importDefault(require("../../core"));
const { ensureNekotonLoaded, nekoton } = core_1.default;
/**
 * @category AccountsStorage
 */
class WalletV3Account {
    static async computeAddress(args) {
        // TODO: Somehow propagate init params
        await ensureNekotonLoaded();
        const publicKey = args.publicKey instanceof bignumber_js_1.default ? args.publicKey : new bignumber_js_1.default(`0x${args.publicKey}`);
        const hash = makeStateInit(publicKey).hash;
        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);
    }
    static async fromPubkey(args) {
        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);
        const address = await WalletV3Account.computeAddress({ publicKey, workchain: args.workchain });
        const result = new WalletV3Account(address);
        result.publicKey = publicKey;
        return result;
    }
    constructor(address) {
        this.address = address;
    }
    async fetchPublicKey(ctx) {
        let publicKey = this.publicKey;
        if (publicKey == null) {
            publicKey = this.publicKey = await ctx
                .fetchPublicKey(this.address)
                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));
        }
        return publicKey.toString(16).padStart(64, '0');
    }
    async prepareMessage(args, ctx) {
        const { seqno, publicKey, stateInit } = await this.fetchState(ctx);
        const signer = await ctx.getSigner(publicKey);
        const expireAt = ctx.nowSec + args.timeout;
        const attachedPayload = args.payload ? ctx.encodeInternalInput(args.payload) : undefined;
        const internalMessage = ctx.encodeInternalMessage({
            dst: args.recipient,
            bounce: args.bounce,
            stateInit: args.stateInit,
            body: attachedPayload,
            amount: args.amount,
        });
        const params = {
            walletId: WALLET_ID,
            expireAt,
            seqno,
            flags: 3,
            message: internalMessage,
        };
        const hash = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params }).hash;
        const signature = await signer.sign(hash, args.signatureId);
        const { signatureParts } = ctx.extendSignature(signature);
        params.signatureHigh = signatureParts.high;
        params.signatureLow = signatureParts.low;
        const signedPayload = ctx.packIntoCell({
            structure: SIGNED_TRANSFER_STRUCTURE,
            data: params,
        }).boc;
        return ctx.createRawExternalMessage({
            address: this.address,
            body: signedPayload,
            stateInit,
            expireAt,
        });
    }
    async fetchState(ctx) {
        let stateInit = undefined;
        let result;
        const state = await ctx.getFullContractState(this.address);
        if (state == null || !state.isDeployed) {
            if (this.publicKey == null) {
                throw new Error('Contract not deployed and public key was not specified');
            }
            stateInit = makeStateInit(this.publicKey).boc;
            result = { seqno: 0, publicKey: this.publicKey };
        }
        else {
            const data = ctx.extractContractData(state.boc);
            if (data == null) {
                throw new Error('Failed to extract contract data');
            }
            result = parseInitData(ctx, data);
        }
        if (this.publicKey == null) {
            this.publicKey = result.publicKey;
        }
        else if (!this.publicKey.eq(result.publicKey)) {
            throw new Error('Public key mismatch');
        }
        return {
            seqno: result.seqno,
            publicKey: result.publicKey.toString(16).padStart(64, '0'),
            stateInit,
        };
    }
}
exports.WalletV3Account = WalletV3Account;
const parseInitData = (ctx, boc) => {
    const parsed = ctx.unpackFromCell({
        structure: DATA_STRUCTURE,
        boc,
        allowPartial: false,
    });
    if (typeof parsed !== 'object' || typeof parsed['seqno'] !== 'string' || typeof parsed['publicKey'] !== 'string') {
        throw new Error('Invalid contract data ');
    }
    return {
        seqno: parseInt(parsed.seqno),
        publicKey: new bignumber_js_1.default(parsed.publicKey),
    };
};
const makeStateInit = (publicKey) => {
    const data = nekoton.packIntoCell(DATA_STRUCTURE, {
        seqno: 0,
        walletId: WALLET_ID,
        publicKey: publicKey.toFixed(0),
    }).boc;
    return nekoton.mergeTvc(WALLET_V3_CODE, data);
};
const UNSIGNED_TRANSFER_STRUCTURE = [
    { name: 'walletId', type: 'uint32' },
    { name: 'expireAt', type: 'uint32' },
    { name: 'seqno', type: 'uint32' },
    { name: 'flags', type: 'uint8' },
    { name: 'message', type: 'cell' },
];
const SIGNED_TRANSFER_STRUCTURE = [
    { name: 'signatureHigh', type: 'uint256' },
    { name: 'signatureLow', type: 'uint256' },
    ...UNSIGNED_TRANSFER_STRUCTURE,
];
const DATA_STRUCTURE = [
    { name: 'seqno', type: 'uint32' },
    { name: 'walletId', type: 'uint32' },
    { name: 'publicKey', type: 'uint256' },
];
const WALLET_V3_CODE = 'te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==';
const WALLET_ID = 0x4ba92d8a;
