import type * as nt from 'nekoton-wasm';
import { GqlSocket, GqlSocketParams } from './gql';
import { JrpcSocket, JrpcSocketParams } from './jrpc';
export { GqlSocketParams } from './gql';
export { JrpcSocketParams } from './jrpc';
/**
 * @category Client
 */
export declare const NETWORK_PRESETS: {
    readonly mainnetJrpc: ConnectionData;
    readonly fld: ConnectionData;
    readonly local: ConnectionData;
};
/**
 * @category Client
 */
export type ConnectionProperties = keyof typeof NETWORK_PRESETS | ConnectionData;
/**
 * Tries to connect with the specified params. Throws an exception in case of error
 *
 * @category Client
 * @throws ConnectionError
 */
export declare function checkConnection(params: ConnectionProperties): Promise<void>;
/**
 * @category Client
 */
export declare class ConnectionError extends Error {
    readonly params: ConnectionData;
    constructor(params: ConnectionData, message: string);
}
export declare function createConnectionController(clock: nt.ClockWithOffset, params: ConnectionProperties, retry?: boolean): Promise<ConnectionController>;
export declare class ConnectionController {
    private readonly _clock;
    private _initializedTransport?;
    private _networkMutex;
    private _release?;
    private _acquiredTransportCounter;
    private _cancelTestTransport?;
    constructor(clock: nt.ClockWithOffset);
    acquire(): Promise<{
        transport: InitializedTransport;
        release: () => void;
    }>;
    use<T>(f: (transport: InitializedTransport) => Promise<T>): Promise<T>;
    startSwitchingNetwork(params: ConnectionData): Promise<INetworkSwitchHandle>;
    get initializedTransport(): InitializedTransport | undefined;
    private _connect;
    private _acquireTransport;
    private _releaseTransport;
}
interface INetworkSwitchHandle {
    switch(): Promise<void>;
}
/**
 * @category Client
 */
export type ConnectionData = {
    id: number;
    group?: string;
    type: 'graphql';
    data: GqlSocketParams;
} | {
    id: number;
    group?: string;
    type: 'jrpc';
    data: JrpcSocketParams;
};
/**
 * @category Client
 */
export type InitializedTransport = {
    id: number;
    group: string;
} & ({
    type: 'graphql';
    data: {
        socket: GqlSocket;
        connection: nt.GqlConnection;
        transport: nt.Transport;
    };
} | {
    type: 'jrpc';
    data: {
        socket: JrpcSocket;
        connection: nt.JrpcConnection;
        transport: nt.Transport;
    };
});
