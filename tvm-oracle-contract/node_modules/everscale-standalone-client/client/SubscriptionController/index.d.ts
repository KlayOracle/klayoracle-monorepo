import type * as ever from 'everscale-inpage-provider';
import type * as nt from 'nekoton-wasm';
import { ConnectionController } from '../ConnectionController';
export declare class SubscriptionController {
    private readonly _connectionController;
    private readonly _notify;
    private readonly _subscriptions;
    private readonly _subscriptionsMutex;
    private readonly _sendMessageRequests;
    private readonly _subscriptionStates;
    constructor(connectionController: ConnectionController, notify: <T extends ever.ProviderEvent>(method: T, params: ever.RawProviderEventData<T>) => void);
    sendMessageLocally(address: string, signedMessage: nt.SignedMessage, params?: nt.ExecutorParams): Promise<nt.Transaction>;
    sendMessage(address: string, signedMessage: nt.SignedMessage): Promise<nt.Transaction | undefined>;
    subscribeToContract(address: string, params: Partial<ever.ContractUpdatesSubscription>, internalId?: number): Promise<ever.ContractUpdatesSubscription>;
    unsubscribeFromContract(address: string, internalId?: number): Promise<void>;
    unsubscribeFromAllContracts(internalId?: number): Promise<void>;
    get subscriptionStates(): {
        [address: string]: ever.ContractUpdatesSubscription;
    };
    private _createSubscription;
    private _tryUnsubscribe;
    private _rejectMessageRequest;
    private _resolveMessageRequest;
    private _notifyStateChanged;
    private _notifyTransactionsFound;
    private _deleteMessageRequestAndGetCallback;
    private _deleteMessageRequest;
}
export type SendMessageCallback = {
    resolve: (transaction?: nt.Transaction) => void;
    reject: (error?: Error) => void;
};
