import type * as nt from 'nekoton-wasm';
import { ConnectionController } from '../ConnectionController';
export declare class ContractSubscription {
    private readonly _connection;
    private readonly _address;
    private readonly _contract;
    private readonly _contractMutex;
    private _releaseTransport?;
    private _loopPromise?;
    private _refreshTimer?;
    private _pollingInterval;
    private _currentPollingMethod;
    private _isRunning;
    private _currentBlockId?;
    private _suggestedBlockId?;
    private _skipIteration;
    static subscribe(connectionController: ConnectionController, address: string, handler: IContractHandler<nt.Transaction>): Promise<ContractSubscription>;
    private constructor();
    setPollingInterval(interval: number): void;
    start(): Promise<void>;
    skipRefreshTimer(pollingMethod?: nt.PollingMethod): void;
    pause(): Promise<void>;
    stop(): Promise<void>;
    prepareReliablePolling(): Promise<void>;
    use<T>(f: (contract: nt.GenericContract) => Promise<T>): Promise<T>;
}
export interface IContractHandler<T extends nt.Transaction> {
    onMessageSent(pendingTransaction: nt.PendingTransaction, transaction: nt.Transaction): void;
    onMessageExpired(pendingTransaction: nt.PendingTransaction): void;
    onStateChanged(newState: nt.ContractState): void;
    onTransactionsFound(transactions: Array<T>, info: nt.TransactionsBatchInfo): void;
}
