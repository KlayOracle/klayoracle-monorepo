import type * as nt from 'nekoton-wasm';
/**
 * @category Keystore
 */
export interface Keystore {
    /**
     * Returns signer for given id
     * @param id: unique signer name
     */
    getSigner(id: string): Promise<Signer | undefined>;
}
/**
 * @category Keystore
 */
export interface Signer {
    /**
     * Hex encoded public key
     */
    readonly publicKey: string;
    /**
     * Sign data as is and return a signature
     * @param rawData - hex or base64 encoded data
     */
    sign(rawData: string, signatureId?: number): Promise<string>;
}
/**
 * @category Keystore
 */
export declare class SimpleKeystore implements Keystore {
    private readonly signers;
    private readonly signersByPublicKey;
    constructor(entries?: {
        [id: string]: nt.Ed25519KeyPair;
    });
    static generateKeyPair(): nt.Ed25519KeyPair;
    addKeyPair(keyPair: nt.Ed25519KeyPair): void;
    addKeyPair(id: string, keyPair: nt.Ed25519KeyPair): void;
    removeKeyPair(id: string): void;
    /**
     * Generate and add a new key
     *
     * @returns keyId of the new signer
     */
    withNewKey(f: (publicKey: string) => Promise<boolean | undefined>, options?: {
        /**
         * Default: public key of the new key pair
         */
        keyId?: string;
        /**
         * Default: false
         */
        keepOnError?: boolean;
    }): Promise<string>;
    getSigner(id: string): Promise<Signer | undefined>;
}
