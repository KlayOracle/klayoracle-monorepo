"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleKeystore = void 0;
const core_1 = __importDefault(require("../core"));
const { nekoton } = core_1.default;
/**
 * @category Keystore
 */
class SimpleKeystore {
    constructor(entries = {}) {
        this.signers = new Map();
        this.signersByPublicKey = new Map();
        for (const [id, signer] of Object.entries(entries)) {
            this.addKeyPair(id, signer);
        }
    }
    static generateKeyPair() {
        return nekoton.ed25519_generateKeyPair();
    }
    addKeyPair(idOrKeypair, rest) {
        let id;
        let keyPair;
        if (typeof idOrKeypair == 'string') {
            id = idOrKeypair;
            keyPair = rest;
        }
        else {
            id = idOrKeypair.publicKey;
            keyPair = idOrKeypair;
        }
        const signer = new SimpleSigner(keyPair);
        this.signers.set(id, signer);
        this.signersByPublicKey.set(keyPair.publicKey, signer);
    }
    removeKeyPair(id) {
        const signer = this.signers.get(id);
        if (signer != null) {
            this.signers.delete(id);
            this.signersByPublicKey.delete(signer.publicKey);
        }
    }
    /**
     * Generate and add a new key
     *
     * @returns keyId of the new signer
     */
    async withNewKey(f, options = {}) {
        const newKey = SimpleKeystore.generateKeyPair();
        const keyId = options.keyId != null ? options.keyId : newKey.publicKey;
        const keepOnError = options.keepOnError || false;
        this.addKeyPair(keyId, newKey);
        return f(keyId)
            .then(retain => {
            if (retain === false) {
                this.removeKeyPair(keyId);
            }
            return keyId;
        })
            .catch((e) => {
            if (!keepOnError) {
                this.removeKeyPair(keyId);
            }
            throw e;
        });
    }
    async getSigner(id) {
        return this.signers.get(id) || this.signersByPublicKey.get(id);
    }
}
exports.SimpleKeystore = SimpleKeystore;
class SimpleSigner {
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.publicKey = this.keyPair.publicKey;
    }
    async sign(rawData, signatureId) {
        return nekoton.ed25519_sign(this.keyPair.secretKey, rawData, signatureId);
    }
}
