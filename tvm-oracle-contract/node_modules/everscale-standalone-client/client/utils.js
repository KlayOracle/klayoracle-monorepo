"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniqueId = exports.convertVersionToInt32 = exports.convertToAddressObject = exports.SafeEventEmitter = void 0;
const everscale_inpage_provider_1 = require("everscale-inpage-provider");
const events_1 = require("events");
function safeApply(handler, context, args) {
    try {
        Reflect.apply(handler, context, args);
    }
    catch (err) {
        // Throw error after timeout so as not to interrupt the stack
        setTimeout(() => {
            throw err;
        });
    }
}
function arrayClone(arr) {
    const n = arr.length;
    const copy = new Array(n);
    for (let i = 0; i < n; i += 1) {
        copy[i] = arr[i];
    }
    return copy;
}
class SafeEventEmitter extends events_1.EventEmitter {
    emit(type, ...args) {
        let doError = type === 'error';
        const events = this._events;
        if (events !== undefined) {
            doError = doError && events.error === undefined;
        }
        else if (!doError) {
            return false;
        }
        if (doError) {
            let er;
            if (args.length > 0) {
                ;
                [er] = args;
            }
            if (er instanceof Error) {
                throw er;
            }
            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);
            err.context = er;
            throw err;
        }
        const handler = events[type];
        if (handler === undefined) {
            return false;
        }
        if (typeof handler === 'function') {
            safeApply(handler, this, args);
        }
        else {
            const len = handler.length;
            const listeners = arrayClone(handler);
            for (let i = 0; i < len; i += 1) {
                safeApply(listeners[i], this, args);
            }
        }
        return true;
    }
}
exports.SafeEventEmitter = SafeEventEmitter;
function convertToAddressObject(address) {
    if (typeof address === 'object' && !(0, everscale_inpage_provider_1.isAddressObject)(address)) {
        throw new Error('Invalid address object');
    }
    return typeof address === 'object' ? address : new everscale_inpage_provider_1.Address(address);
}
exports.convertToAddressObject = convertToAddressObject;
/**
 * @category Utils
 */
const convertVersionToInt32 = (version) => {
    const parts = version.split('.');
    if (parts.length !== 3) {
        throw new Error('Received invalid version string');
    }
    parts.forEach((part) => {
        if (~~part > 999) {
            throw new Error(`Version string invalid, ${part} is too large`);
        }
    });
    let multiplier = 1000000;
    let numericVersion = 0;
    for (let i = 0; i < 3; i++) {
        numericVersion += ~~parts[i] * multiplier;
        multiplier /= 1000;
    }
    return numericVersion;
};
exports.convertVersionToInt32 = convertVersionToInt32;
const MAX = 4294967295;
let idCounter = Math.floor(Math.random() * MAX);
function getUniqueId() {
    idCounter = (idCounter + 1) % MAX;
    return idCounter;
}
exports.getUniqueId = getUniqueId;
