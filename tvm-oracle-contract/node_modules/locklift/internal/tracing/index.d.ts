import { ProviderRpcClient } from "everscale-inpage-provider";
import { AllowedCodes, TraceParams } from "./types";
import { Factory } from "../factory";
import { TracingInternal } from "./tracingInternal";
import { Transactions } from "../../utils";
import { TransactionParameter } from "../../types";
import { ViewTracingTree } from "./viewTraceTree/viewTracingTree";
export declare class Tracing {
    private readonly ever;
    private readonly tracingInternal;
    private readonly features;
    constructor(ever: ProviderRpcClient, tracingInternal: TracingInternal, features: Transactions);
    setContractLabels: TracingInternal["setContractLabels"];
    trace: <T extends TransactionParameter>(transactionProm: Promise<T>, config?: Omit<TraceParams, "inMsgId">) => Promise<T & {
        traceTree: ViewTracingTree | undefined;
    }>;
    get allowedCodes(): AllowedCodes;
    setAllowedCodes: (allowedCodes: import("./types").OptionalContracts) => void;
    setAllowedCodesForAddress: (address: string | import("everscale-inpage-provider").Address, allowedCodes: import("./types").OptionalContracts) => void;
    removeAllowedCodesForAddress: (address: string | import("everscale-inpage-provider").Address, codesToRemove: import("./types").OptionalContracts) => void;
    removeAllowedCodes: (codesToRemove: import("./types").OptionalContracts) => void;
}
export declare const createTracing: ({ ever, factory, features, endpoint, }: {
    ever: ProviderRpcClient;
    factory: Factory<any>;
    features: Transactions;
    endpoint?: string | undefined;
}) => Tracing;
